name: Pressure Analysis

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  analyze-pressure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create latest directory
      run: mkdir -p latest
    
    - name: Collect pressure data
      run: |
        echo '[' > latest/pressure.json
        first=true
        for file in $(ls -1 data/*.json | sort); do
          if [ -f "$file" ]; then
            pressure=$(jq -r '.main.pressure' "$file")
            if [ "$pressure" != "null" ]; then
              if [ "$first" = false ]; then 
                echo ',' >> latest/pressure.json
              fi
              first=false
              jq -n --arg dt "$(basename "$file" .json)" --arg p "$pressure" \
                '{datetime: $dt, pressure: ($p | tonumber)}' >> latest/pressure.json
            fi
          fi
        done
        echo ']' >> latest/pressure.json
        echo "Collected $(jq 'length' latest/pressure.json) pressure readings"
    
    - name: Analyze with OpenAI
      run: |
        # Read prompt and pressure data
        PROMPT_TEXT=$(cat latest/prompt-pressure-report.txt)
        PRESSURE_DATA=$(cat latest/pressure.json)
        
        # Create the full prompt
        FULL_PROMPT="${PROMPT_TEXT}
        
        データ: ${PRESSURE_DATA}"
        
        # Call OpenAI API with proper JSON escaping
        # Create JSON payload using jq
        jq -n \
          --arg prompt "$FULL_PROMPT" \
          '{
            "model": "gpt-4o-mini",
            "messages": [{"role": "user", "content": $prompt}],
            "max_tokens": 200,
            "temperature": 0.3
          }' > /tmp/openai_payload.json
        
        # Make API call
        RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -d @/tmp/openai_payload.json)
        
        echo "API Response:"
        echo "$RESPONSE" | jq '.'
        
        # Check for API errors
        if echo "$RESPONSE" | jq -e '.error' >/dev/null; then
          echo "API Error detected"
          jq -n '{
            "meteorological-alert": "エラー",
            "report": "API接続エラーのため分析不可"
          }' > latest/pressure-report.json
        else
          # Extract content and parse according to prompt format
          CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "分析結果の取得に失敗"')
          echo "OpenAI Response Content: $CONTENT"
          
          # Parse the response: line 1 = percentage, line 2 = description
          PERCENTAGE=$(echo "$CONTENT" | head -n1 | xargs)
          DESCRIPTION=$(echo "$CONTENT" | tail -n+2 | xargs)
          
          echo "Parsed percentage: $PERCENTAGE"
          echo "Parsed description: $DESCRIPTION"
          
          # Create structured output with parsed values
          jq -n --arg alert "$PERCENTAGE" --arg report "$DESCRIPTION" '{
            "meteorological-alert": $alert,
            "report": $report
          }' > latest/pressure-report.json
        fi
        
        echo "Final result:"
        cat latest/pressure-report.json
    
    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add latest/
        if ! git diff --staged --quiet; then
          git commit -m "Update pressure analysis - $(TZ='Asia/Tokyo' date '+%Y-%m-%d %H:%M')"
          git push
        fi
