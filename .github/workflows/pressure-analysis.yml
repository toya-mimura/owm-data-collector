name: Pressure Analysis

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  analyze-pressure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create latest directory
      run: mkdir -p latest
    
    - name: Collect pressure data
      run: |
        echo '[' > latest/pressure.json
        first=true
        for file in $(ls -1 data/*.json | sort); do
          if [ -f "$file" ]; then
            pressure=$(jq -r '.main.pressure' "$file")
            if [ "$pressure" != "null" ]; then
              if [ "$first" = false ]; then 
                echo ',' >> latest/pressure.json
              fi
              first=false
              jq -n --arg dt "$(basename "$file" .json)" --arg p "$pressure" \
                '{datetime: $dt, pressure: ($p | tonumber)}' >> latest/pressure.json
            fi
          fi
        done
        echo ']' >> latest/pressure.json
        echo "Collected $(jq 'length' latest/pressure.json) pressure readings"
    
    - name: Analyze with OpenAI
      run: |
        PROMPT="これは直近24時間の気圧データです。気象病（片頭痛や倦怠感）の発生可能性を分析してください。

データ: $(cat latest/pressure.json | jq -c .)

以下のJSON形式のみで回答してください:
{
  \"meteorological-alert\": \"XX%\",
  \"report\": \"30文字以内の分析内容\"
}"
        
        RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -d "{
            \"model\": \"gpt-4o-mini\",
            \"messages\": [{\"role\": \"user\", \"content\": \"$PROMPT\"}],
            \"max_tokens\": 200,
            \"temperature\": 0.3
          }")
        
        echo "API Response:"
        echo "$RESPONSE" | jq '.'
        
        if echo "$RESPONSE" | jq -e '.error' >/dev/null; then
          jq -n '{
            "meteorological-alert": "エラー",
            "report": "API接続エラーのため分析不可"
          }' > latest/pressure-report.json
        else
          CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          CLEAN_JSON=$(echo "$CONTENT" | sed 's/```json//g' | sed 's/```//g' | xargs)
          
          if echo "$CLEAN_JSON" | jq empty 2>/dev/null; then
            echo "$CLEAN_JSON" > latest/pressure-report.json
          else
            jq -n --arg content "$CONTENT" '{
              "meteorological-alert": "分析済",
              "report": ($content | .[0:30])
            }' > latest/pressure-report.json
          fi
        fi
        
        echo "Result:"
        cat latest/pressure-report.json
    
    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add latest/
        if ! git diff --staged --quiet; then
          git commit -m "Update pressure analysis - $(TZ='Asia/Tokyo' date '+%Y-%m-%d %H:%M')"
          git push
        fi
